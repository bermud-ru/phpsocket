#!/usr/bin/env bash
#
# @category Installation PHPSocket Framework (CentOS 7.x, 8.x)
# @author Андрей Новиков <andrey@novikov.be>
# @data 07/12/2015
#

# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

######## CONFIG ##########################################################################
export vendor=vendor/bermud-ru/phproll
export serverRoot=$(pwd)
export PROJECT=${PWD##*/}
dm="$PROJECT.server"
export DOMAIN=$(jq -r '.install.domain // "$dm"' ./composer.json)
export local=$(hostname --all-ip-addresses | awk '{print $1}')
export ADDRESS=$(jq -r '.install.address // "$local"' ./composer.json)
export SSL_path=$(pwd)/etc/pki
##########################################################################################
printf "Post-install scripting ...\n\n"

printf "NGINX webSocket configuration\n"
cat << EOF > ./etc/nginx/$PROJECT.wss.conf
map \$http_upgrade \$connection_upgrade {
    default upgrade;
    '' close;
}

upstream appserver {
    server $local:8001; # appserver_ip:ws_port
}
server {
    # client_wss_port
    listen 8000 ssl http2;
    #ssl on;
    ssl_certificate     $SSL_path/$DOMAIN.crt;
    ssl_certificate_key $SSL_path/$DOMAIN.key;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;
    #ssl_session_tickets on;
    #so_keepalive on;
    tcp_nodelay on;
    #websocket_pass appserver;
    #websocket_buffer 1k;

    location / {
        # prevents 502 bad gateway error
        proxy_buffers 8 32k;
        proxy_buffer_size 64k;
        proxy_pass http://appserver;
        proxy_redirect off;

        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;
        proxy_read_timeout 86400;
    }
}
EOF

export SELinux=$(sestatus)
export NGINX=$(which nginx)
if [ ! -z "$NGINX" ]; then
printf "NGINX configs context resotre\n"
chown -R root:root $serverRoot/etc/nginx
if [ ! -f /etc/nginx/conf.d/${PROJECT}.wss.conf ]; then
ln -s $serverRoot/etc/nginx/$PROJECT.wss.conf /etc/nginx/conf.d/$PROJECT.wss.conf
fi
chown -h root:wheel /etc/nginx/conf.d/*
if [ ! -z "$SELinux" ]; then
restorecon -vF $serverRoot/etc/nginx/*
chcon -t httpd_config_t $serverRoot/etc/nginx/*
restorecon -vF /etc/nginx/conf.d/*
fi
fi

printf "WEB context resotre\n"
if [ ! -z "$SELinux" ]; then
chcon -R -t httpd_sys_content_t $serverRoot
CONTEXT=$(semanage fcontext -l | grep -i "${serverRoot}/(/.*)?")
if [ -z "$CONTEXT" ]; then
semanage fcontext -a -t httpd_sys_content_t "${serverRoot}/(/.*)?"
fi
fi
exit